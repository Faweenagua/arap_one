<?xml version="1.0"?>

<robot name="diff_drive_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <!-- Robot Parameters -->
    <xacro:property name="PI" value="3.14159265"/>

    <xacro:property name="chassis_length" value="0.3"/>
    <xacro:property name="chassis_width" value="0.3"/>
    <xacro:property name="chassis_height" value="0.15"/>
    <xacro:property name="chassis_density" value="7850.0"/> <!-- Steel -->
    <xacro:property name="chassis_mass" value="${chassis_density * chassis_length * chassis_height * chassis_width}"/>
    <xacro:property name="chassis_inertia_x" value="${1.0/12.0 * chassis_mass * (chassis_height*chassis_height + chassis_width*chassis_width)}"/>
    <xacro:property name="chassis_inertia_y" value="${1.0/12.0 * chassis_mass * (chassis_length*chassis_length + chassis_height*chassis_height)}"/>
    <xacro:property name="chassis_inertia_z" value="${1.0/12.0 * chassis_mass * (chassis_length*chassis_length + chassis_width*chassis_width)}"/>

    <xacro:property name="wheel_radius" value="0.05"/>
    <xacro:property name="wheel_width" value="0.04"/>
    <xacro:property name="wheel_separation" value="${chassis_width + wheel_width}"/>
    <xacro:property name="wheel_offset" value="${chassis_length/2 - wheel_radius}"/>
    <xacro:property name="wheel_density" value="900"/> <!-- Ruber -->
    <xacro:property name="wheel_mass" value="${wheel_density * PI * wheel_radius * wheel_radius * wheel_width}"/>
    <xacro:property name="wheel_inertia_x" value="${1.0/12.0 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_width*wheel_width)}"/>
    <xacro:property name="wheel_inertia_y" value="${1.0/12.0 * wheel_mass * (3*wheel_radius*wheel_radius + wheel_width*wheel_width)}"/>
    <xacro:property name="wheel_inertia_z" value="${1.0/2.0 * wheel_mass * wheel_radius * wheel_radius}"/>

    <xacro:property name="caster_radius" value="0.05"/>
    <xacro:property name="caster_offset" value="${chassis_length/2 - caster_radius}"/>
    <xacro:property name="caster_density" value="0.1"/>
    <xacro:property name="caster_mass" value="${caster_density * 4.0/3.0 * PI * caster_radius * caster_radius * caster_radius}"/>
    <xacro:property name="caster_inertia_x" value="${2.0/5.0 * caster_mass * caster_radius * caster_radius}"/>
    <xacro:property name="caster_inertia_y" value="${2.0/5.0 * caster_mass * caster_radius * caster_radius}"/>
    <xacro:property name="caster_inertia_z" value="${2.0/5.0 * caster_mass * caster_radius * caster_radius}"/>

    <!-- Control Parameters -->    
    <xacro:property name="max_linear_acceleration" value="10"/>

    <!-- Links -->

    <!-- chassis Link -->
    <link name="chassis_link">
        <visual>
            <origin xyz="0 0 ${caster_radius/2}" rpy="0.0 0.0 0.0"/>
            <geometry>
                <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
            </geometry>
            <material name="chassis_material">
                <color rgba="0.96 0.26 0.21 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 ${caster_radius/2}" rpy="0.0 0.0 0.0"/>
            <geometry>
                <box size="${chassis_length} ${chassis_width} ${chassis_height}"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="10"/>
            <inertia ixx="${chassis_inertia_x}" ixy="0.0" ixz="0.0" iyy="${chassis_inertia_y}" iyz="0" izz="${chassis_inertia_z}"/>
            <origin xyz="0 0 ${caster_radius/2}" rpy="0 0 0"/>
        </inertial>
    </link>

    <!-- Left Wheel -->
    <link name="left_wheel_link">
        <visual>
            <origin xyz="0.0 0.0 0.0" rpy="${PI/2} 0.0 0.0"/>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
            <material name="wheel_material">
                <color rgba="0.0 0.0 0.0 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0.0 0.0 0.0" rpy="${PI/2} 0.0 0.0"/>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="2"/>
            <inertia ixx="${wheel_inertia_x}" ixy="0.0" ixz="0.0" iyy="${wheel_inertia_y}" iyz="0" izz="${wheel_inertia_z}"/>
            <origin xyz="0.0 0.0 0.0" rpy="${PI/2} 0.0 0.0"/>
        </inertial>
    </link>

    <!-- Right Wheel -->
    <link name="right_wheel_link">
        <visual>
            <origin xyz="0.0 0.0 0.0" rpy="${PI/2} 0.0 0.0"/>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
            <material name="wheel_material">
                <color rgba="0.0 0.0 0.0 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0.0 0.0 0.0" rpy="${PI/2} 0.0 0.0"/>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="2"/>
            <inertia ixx="${wheel_inertia_x}" ixy="0.0" ixz="0.0" iyy="${wheel_inertia_y}" iyz="0" izz="${wheel_inertia_z}"/>
            <origin xyz="0.0 0.0 0.0" rpy="${PI/2} 0.0 0.0"/>
        </inertial>
    </link>

    <!-- Caster Wheel -->
    <link name="caster_link">
        <visual>
            <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
            <geometry>
                <sphere radius="${caster_radius}"/>
            </geometry>
            <material name="caster_material">
                <color rgba="0.62 0.62 0.62 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
            <geometry>
                <sphere radius="${caster_radius}"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="0.5"/>
            <inertia ixx="${caster_inertia_x}" ixy="0.0" ixz="0.0" iyy="${caster_inertia_y}" iyz="0" izz="${caster_inertia_z}"/>
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </inertial>
    </link>

    <!-- Joints -->

    <!-- Left Wheel Joint -->
    <joint name="left_wheel_joint" type="continuous">
        <origin xyz="-${wheel_offset} ${wheel_separation/2} -${wheel_radius/2}" rpy="0 0 0"/>
        <parent link="chassis_link"/>
        <child link="left_wheel_link"/>
        <axis xyz="0 1 0"/>
        <limit effort="100" velocity="10.0"/>
        <dynamics damping="0.1" friction="0.1"/>
    </joint>

    <!-- Right Wheel Joint -->
    <joint name="right_wheel_joint" type="continuous">
        <origin xyz="-${wheel_offset} ${-wheel_separation/2} -${wheel_radius/2}" rpy="0 0 0"/>
        <parent link="chassis_link"/>
        <child link="right_wheel_link"/>
        <axis xyz="0 1 0"/>
        <limit effort="100" velocity="10.0"/>
        <dynamics damping="0.1" friction="0.1"/>
    </joint>

    <!-- Caster Wheel Joint (fixed) -->
    <joint name="caster_joint" type="fixed">
        <origin xyz="${caster_offset} 0 -${caster_radius/2}" rpy="0 0 0"/>
        <parent link="chassis_link"/>
        <child link="caster_link"/>
    </joint>

    <!-- Gazebo Parameters -->
    <gazebo reference="chassis_link">
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
    </gazebo>

    <gazebo reference="right_wheel_link">
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
    </gazebo>

    <gazebo reference="left_wheel_link">
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
    </gazebo>

    <gazebo reference="caster_link">
        <mu1>0.000001</mu1>
        <mu2>0.000001</mu2>
    </gazebo>

    <!-- Gazebo Plugins -->
    <gazebo>
        <plugin filename="gz-sim-diff-drive-system" name="gz::sim::systems::DiffDrive">
            <right_joint>right_wheel_joint</right_joint>
            <left_joint>left_wheel_joint</left_joint>
            <wheel_separation>${wheel_separation}</wheel_separation>
            <wheel_radius>${wheel_radius}</wheel_radius>
            <max_linear_acceleration>${max_linear_acceleration}</max_linear_acceleration>
            <odom_publish_frequency>100</odom_publish_frequency>
            <topic>cmd_vel</topic>
            <odom_topic>odom</odom_topic>
        </plugin>

        <plugin filename="gz-sim-joint-state-publisher-system" name="gz::sim::systems::JointStatePublisher">
            <topic>joint_states</topic>
            <joint_name>right_wheel_joint</joint_name>
            <joint_name>left_wheel_joint</joint_name>
        </plugin>
    </gazebo>

</robot>